package com.rot.socket.enums

object SocketEvents {
    //   Client -> Server
    const val CLIENT_SERVER_STOP = "CLIENT_SERVER_STOP"
    const val CLIENT_SERVER_START = "CLIENT_SERVER_START"
    const val CLIENT_SERVER_ADD_SENSOR = "CLIENT_SERVER_ADD_SENSOR"
    const val CLIENT_SERVER_REMOVE_SENSOR = "CLIENT_SERVER_REMOVE_SENSOR"
    const val CLIENT_SERVER_SAVE_SESSION = "CLIENT_SERVER_SAVE_SESSION"
    const val CLIENT_SERVER_SENSOR_LIST = "CLIENT_SERVER_SENSOR_LIST"

    //  Server -> Sensor
    const val SERVER_SENSOR_STOP = "CLIENT_SERVER_STOP"
    const val SERVER_SENSOR_START = "SERVER_SENSOR_START"
    const val SERVER_SENSOR_JOINED_ROOM = "SERVER_SENSOR_JOINED_ROOM"
    const val SERVER_SENSOR_REMOVED_ROOM = "SERVER_SENSOR_REMOVED_ROOM"

    // Sensor -> Server
    const val SENSOR_SERVER_MEASUREMENT = "SENSOR_SERVER_MEASUREMENT"
    const val SENSOR_SERVER_REGISTER_SENSOR = "SENSOR_SERVER_REGISTER_SENSOR"

    // Server -> Client
    const val SERVER_CLIENT_MEASUREMENT = "SERVER_CLIENT_MEASUREMENT"
    const val SERVER_CLIENT_SENSOR_LIST = "SERVER_CLIENT_SENSOR_LIST"

    // All
    const val WELCOME = "WELCOME"
}

enum class MessageType(val description: String) {
    DEFAULT("Default"),

    // Client -> Server
    CLIENT_SERVER_STOP(SocketEvents.CLIENT_SERVER_STOP),
    CLIENT_SERVER_START(SocketEvents.CLIENT_SERVER_START),
    CLIENT_SERVER_ADD_SENSOR(SocketEvents.CLIENT_SERVER_ADD_SENSOR),
    CLIENT_SERVER_REMOVE_SENSOR(SocketEvents.CLIENT_SERVER_REMOVE_SENSOR),
    CLIENT_SERVER_SAVE_SESSION(SocketEvents.CLIENT_SERVER_SAVE_SESSION),
    CLIENT_SERVER_SENSOR_LIST(SocketEvents.CLIENT_SERVER_SENSOR_LIST),

    // Server -> Sensor
    SERVER_SENSOR_STOP(SocketEvents.SERVER_SENSOR_STOP),
    SERVER_SENSOR_START(SocketEvents.SERVER_SENSOR_START),
    SERVER_SENSOR_JOINED_ROOM(SocketEvents.SERVER_SENSOR_JOINED_ROOM),
    SERVER_SENSOR_REMOVED_ROOM(SocketEvents.SERVER_SENSOR_REMOVED_ROOM),

    // Sensor -> Server
    SENSOR_SERVER_MEASUREMENT(SocketEvents.SENSOR_SERVER_MEASUREMENT),
    SENSOR_SERVER_REGISTER_SENSOR(SocketEvents.SENSOR_SERVER_REGISTER_SENSOR),

    // Server -> Client
    SERVER_CLIENT_MEASUREMENT(SocketEvents.SERVER_CLIENT_MEASUREMENT),
    SERVER_CLIENT_SENSOR_LIST(SocketEvents.SERVER_CLIENT_SENSOR_LIST),

    // All
    WELCOME(SocketEvents.WELCOME);
}
